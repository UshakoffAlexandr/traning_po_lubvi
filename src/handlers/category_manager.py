from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
import json
import os
from typing import List, Dict
from config import USERS_DATA_DIR, CHOOSING_CATEGORY_NAME

class CategoryManager:
    def __init__(self):
        self.commands = [
            CommandHandler('start', self.show_main_menu)
        ]
        self.callbacks = [
            CallbackQueryHandler(self.handle_category_callback, pattern='^category_'),
            CallbackQueryHandler(self.handle_settings_callback, pattern='^settings'),
            CallbackQueryHandler(self.handle_add_category_callback, pattern='^add_category'),
            CallbackQueryHandler(self.handle_delete_category_menu_callback, pattern='^delete_category_menu'),
            CallbackQueryHandler(self.handle_delete_category_callback, pattern='^delete_category_'),
            CallbackQueryHandler(self.back_to_main_menu_callback, pattern='^back_to_main')
        ]
        self.handlers = [
            MessageHandler(
                Filters.text & ~Filters.command,
                self.handle_category_name_input
            )
        ]

    def show_main_menu(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        chat_id = update.effective_chat.id
        categories = self.get_user_categories(chat_id)
        
        keyboard = []
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        current_row = []
        for category in categories:
            current_row.append(
                InlineKeyboardButton(f"üìÅ {category}", callback_data=f"category_{category}")
            )
            if len(current_row) == 2:
                keyboard.append(current_row)
                current_row = []
        
        if current_row:
            keyboard.append(current_row)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard.append([
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message:
            update.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=reply_markup
            )
        else:
            update.callback_query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=reply_markup
            )

    def handle_settings_callback(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        query.answer()
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category_menu")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    def handle_add_category_callback(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        query.answer()
        
        context.user_data['waiting_for_category_name'] = True
        query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="settings")
            ]])
        )
        return CHOOSING_CATEGORY_NAME

    def handle_category_name_input(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not context.user_data.get('waiting_for_category_name'):
            return
        
        chat_id = update.effective_chat.id
        category_name = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
        if not category_name:
            update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="settings")
                ]])
            )
            return CHOOSING_CATEGORY_NAME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ—Ç
        categories = self.get_user_categories(chat_id)
        if category_name in categories:
            update.message.reply_text(
                "‚ùå –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="settings")
                ]])
            )
            return CHOOSING_CATEGORY_NAME
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        self.add_category(chat_id, category_name)
        context.user_data['waiting_for_category_name'] = False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("üìÅ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"category_{category_name}")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return -1

    def handle_delete_category_menu_callback(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        query.answer()
        
        chat_id = query.message.chat_id
        categories = self.get_user_categories(chat_id)
        
        if not categories:
            query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")
                ]])
            )
            return
        
        keyboard = []
        for category in categories:
            keyboard.append([
                InlineKeyboardButton(f"‚ùå {category}", callback_data=f"delete_category_{category}")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")])
        
        query.edit_message_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    def handle_delete_category_callback(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        chat_id = query.message.chat_id
        category = query.data.replace("delete_category_", "")
        
        self.delete_category(chat_id, category)
        query.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category}¬ª —É–¥–∞–ª–µ–Ω–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.handle_delete_category_menu_callback(update, context)

    def back_to_main_menu_callback(self, update: Update, context: CallbackContext) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        query.answer()
        self.show_main_menu(update, context)

    def handle_category_callback(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        chat_id = query.message.chat_id
        category = query.data.replace("category_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        categories = self.get_user_categories(chat_id)
        if category not in categories:
            query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data=f"create_{category}")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", callback_data=f"subscription_list_{category}")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data=f"subscription_delete_menu_{category}")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        query.edit_message_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    def get_user_categories(self, chat_id: int) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        file_path = os.path.join(USERS_DATA_DIR, f"{chat_id}.json")
        if not os.path.exists(file_path):
            return []
        with open(file_path, 'r') as f:
            data = json.load(f)
            return list(data.get('categories', {}).keys())

    def add_category(self, chat_id: int, category_name: str) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        file_path = os.path.join(USERS_DATA_DIR, f"{chat_id}.json")
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                data = json.load(f)
        else:
            data = {'categories': {}}
        
        if 'categories' not in data:
            data['categories'] = {}
        
        if category_name not in data['categories']:
            data['categories'][category_name] = {
                'name': category_name,
                'subscriptions': []
            }

        with open(file_path, 'w') as f:
            json.dump(data, f, indent=4)

    def delete_category(self, chat_id: int, category_name: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        file_path = os.path.join(USERS_DATA_DIR, f"{chat_id}.json")
        if not os.path.exists(file_path):
            return
        
        with open(file_path, 'r') as f:
            data = json.load(f)
        
        if 'categories' in data and category_name in data['categories']:
            del data['categories'][category_name]
            
        with open(file_path, 'w') as f:
            json.dump(data, f, indent=4) 