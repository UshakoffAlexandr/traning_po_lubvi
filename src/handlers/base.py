import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import CallbackContext, ConversationHandler
from models.user_data import UserDataManager
from utils.subscription_manager import SubscriptionManager
from utils.formatting import format_subscription_info
from config import ADMIN_IDS

logger = logging.getLogger(__name__)

def is_admin(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return chat_id in ADMIN_IDS

class BaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, subscription_manager: SubscriptionManager = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.user_data_manager = UserDataManager()
        self.subscription_manager = subscription_manager
    
    def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.message:
            return
        
        chat_id = update.effective_chat.id
        user_data = self.user_data_manager.load_user_data(chat_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        current_row = []
        
        for category_id, category_data in DEFAULT_CATEGORIES.items():
            button = InlineKeyboardButton(
                category_data['name'],
                callback_data=category_id
            )
            current_row.append(button)
            
            if len(current_row) == 2:
                keyboard.append(current_row)
                current_row = []
        
        if current_row:
            keyboard.append(current_row)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏.\n"
            "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    def help(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not update.message:
            return
        
        update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
    
    def cancel(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        if not update.message:
            return
        
        context.user_data.clear()
        update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END
    
    def error_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        try:
            logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
            if update:
                if update.effective_message:
                    update.effective_message.reply_text(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
                        reply_markup=None
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")
    
    def send_error_message(self, update: Update, text: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        default_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
        message = text or default_text
        
        if update.callback_query:
            update.callback_query.message.reply_text(message)
        elif update.message:
            update.message.reply_text(message)
    
    def get_category_keyboard(self, chat_id: int, category: str, show_list: bool = True) -> tuple[str, InlineKeyboardMarkup]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {format_category_name(category)}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
        subscriptions = self.subscription_manager.get_subscriptions(chat_id, category)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        if subscriptions:
            text += "üìã –í–∞—à–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n"
            for i, sub in enumerate(subscriptions, 1):
                used = len(sub.get('used_lessons', {}))
                total = sub['lessons']
                keyboard.append([
                    InlineKeyboardButton(
                        format_subscription_info(sub, show_lessons=True),
                        callback_data=f"lesson_{category}_{i-1}_0"
                    )
                ])
            text += "\n"
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        subscription_types = DEFAULT_CATEGORIES.get(category, {}).get('subscription_types', [])
        if subscription_types:
            for sub_type in subscription_types:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ûï –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ {sub_type['lessons']} –∑–∞–Ω—è—Ç–∏–π",
                        callback_data=f"create_{category}_{sub_type['lessons']}"
                    )
                ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data="back_to_main")
        ])
        
        return text, InlineKeyboardMarkup(keyboard) 