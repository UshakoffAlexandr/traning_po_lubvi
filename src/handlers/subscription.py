import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import CallbackContext, ConversationHandler, CallbackQueryHandler
from .base import BaseHandler
from utils.formatting import format_subscription_info
from config import CHOOSING_NAME_SURNAME, ENTERING_LESSONS_COUNT, USERS_DATA_DIR
from utils.subscription_manager import SubscriptionManager
import os
import json
from typing import Dict
from datetime import datetime

logger = logging.getLogger(__name__)

class SubscriptionHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, subscription_manager: SubscriptionManager):
        super().__init__(subscription_manager)
        self.commands = []
        self.callbacks = [
            CallbackQueryHandler(self.handle_subscription_callback, pattern='^subscription_'),
            CallbackQueryHandler(self.handle_lesson_callback, pattern='^lesson_')
        ]
    
    def button(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        query.answer()
        
        try:
            chat_id = update.effective_chat.id
            data = query.data
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: chat_id={chat_id}, data={data}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if data == 'start' or data == 'back_to_main':
                self.start(update, context)
                return ConversationHandler.END
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if data.startswith('category_'):
                category = data.replace('category_', '')
                user_data = self.user_data_manager.load_user_data(chat_id)
                if category not in user_data['categories']:
                    logger.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {category}")
                    self.send_error_message(update, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return ConversationHandler.END
                
                text, reply_markup = self.get_category_keyboard(chat_id, category)
                query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup
                )
                return ConversationHandler.END
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if data == 'settings':
                keyboard = [
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
                    [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category_menu")],
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]
                query.edit_message_text(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return ConversationHandler.END
            
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
            self.send_error_message(update)
            return ConversationHandler.END
    
    def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.message and not update.callback_query:
            return
        
        chat_id = update.effective_chat.id
        user_data = self.user_data_manager.load_user_data(chat_id)
        keyboard = []
        current_row = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for category_id, category_data in user_data['categories'].items():
            button = InlineKeyboardButton(
                category_data.get('name', category_id),
                callback_data=f'category_{category_id}'
            )
            current_row.append(button)
            
            if len(current_row) == 2:
                keyboard.append(current_row)
                current_row = []
        
        if current_row:
            keyboard.append(current_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard.append([
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        
        if update.callback_query:
            update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup
            )
        else:
            update.message.reply_text(
                text=message,
                reply_markup=reply_markup
            )
    
    def get_category_keyboard(self, chat_id: int, category: str) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        user_data = self.user_data_manager.load_user_data(chat_id)
        category_data = user_data['categories'].get(category, {})
        
        text = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_data.get('name', category)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data=f"create_{category}")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", callback_data=f"subscription_list_{category}")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data=f"subscription_delete_menu_{category}")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        return text, InlineKeyboardMarkup(keyboard)

    def process_name_surname(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞"""
        try:
            chat_id = update.effective_chat.id
            current_state = context.user_data.get('state', None)
            logger.info(f"process_name_surname –≤—ã–∑–≤–∞–Ω: chat_id={chat_id}, current_state={current_state}, user_data={context.user_data}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ callback query (–Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞)
            if update.callback_query:
                query = update.callback_query
                query.answer()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
                category = query.data.replace('create_', '')
                context.user_data['category'] = category
                context.user_data['state'] = CHOOSING_NAME_SURNAME
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"category_{category}")]]
                query.edit_message_text(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}, state={CHOOSING_NAME_SURNAME}")
                return CHOOSING_NAME_SURNAME
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
            if update.message:
                text = update.message.text.strip()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ (–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞)
                if current_state == CHOOSING_NAME_SURNAME:
                    context.user_data['subscription_name'] = text
                    context.user_data['state'] = ENTERING_LESSONS_COUNT
                    category = context.user_data.get('category')
                    
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                    keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"category_{category}")]]
                    update.message.reply_text(
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {text}, state={ENTERING_LESSONS_COUNT}")
                    return ENTERING_LESSONS_COUNT
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
                elif current_state == ENTERING_LESSONS_COUNT:
                    try:
                        days = int(text)
                        if days <= 0:
                            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                        
                        category = context.user_data.get('category')
                        subscription_name = context.user_data.get('subscription_name')
                        
                        if not category or not subscription_name:
                            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context.user_data}")
                            update.message.reply_text(
                                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ."
                            )
                            return ConversationHandler.END
                        
                        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è={category}, –Ω–∞–∑–≤–∞–Ω–∏–µ={subscription_name}, –¥–Ω–µ–π={days}")
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
                        if not self.subscription_manager.add_subscription(chat_id, category, subscription_name, days):
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: chat_id={chat_id}, category={category}, name={subscription_name}, days={days}")
                            update.message.reply_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                            )
                            return ConversationHandler.END
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        keyboard = [
                            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã", callback_data=f"subscription_list_{category}")],
                            [InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"category_{category}")]
                        ]
                        
                        update.message.reply_text(
                            f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {subscription_name}\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {days}",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                        
                        logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {subscription_name}")
                        
                        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        context.user_data.clear()
                        return ConversationHandler.END
                        
                    except ValueError:
                        category = context.user_data.get('category')
                        keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"category_{category}")]]
                        update.message.reply_text(
                            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                        return ENTERING_LESSONS_COUNT
                
                else:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                    update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                        ]])
                    )
                    return ConversationHandler.END
            
            logger.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}")
            if update.message:
                update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            return ConversationHandler.END
    
    def handle_subscription_callback(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        chat_id = query.message.chat_id
        data = query.data
        
        if data.startswith('subscription_list_'):
            self.show_subscription_list(update, context)
        elif data.startswith('subscription_delete_menu_'):
            self.show_delete_subscription_menu(update, context)
        elif data.startswith('subscription_delete_'):
            self.handle_delete_subscription(update, context)

    def show_delete_subscription_menu(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"""
        query = update.callback_query
        chat_id = query.message.chat_id
        category = query.data.split('_')[3]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        subscriptions = self.subscription_manager.get_subscriptions(chat_id, category)
        keyboard = []
        
        if not subscriptions:
            query.edit_message_text(
                "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{category}")
                ]])
            )
            query.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        for i, sub in enumerate(subscriptions):
            name = sub.get('name', '')
            used_lessons = sub.get('used_lessons', {})
            if not isinstance(used_lessons, dict):
                used_lessons = {}
            total = sub.get('total_lessons', 0)
            used_count = len(used_lessons)
            
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå {name} ({used_count}/{total} –¥–Ω–µ–π)",
                    callback_data=f"subscription_delete_{category}_{i}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{category}")])
        
        query.edit_message_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        query.answer()

    def handle_delete_subscription(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        chat_id = query.message.chat_id
        _, _, category, sub_index = query.data.split('_', 3)
        
        try:
            sub_index = int(sub_index)
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            subscriptions = self.subscription_manager.get_subscriptions(chat_id, category)
            if not subscriptions or sub_index >= len(subscriptions):
                self.send_error_message(update, "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –£–¥–∞–ª—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç
            subscriptions.pop(sub_index)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.subscription_manager.save_subscriptions(chat_id, category, subscriptions)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            self.show_delete_subscription_menu(update, context)
            
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}")
            self.send_error_message(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def show_subscription_list(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"""
        query = update.callback_query
        chat_id = query.message.chat_id
        category = query.data.split('_')[2]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        subscriptions = self.subscription_manager.get_subscriptions(chat_id, category)
        keyboard = []
        
        if not subscriptions:
            query.edit_message_text(
                "üìã –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{category}")
                ]])
            )
            query.answer()
            return
        
        text = "üìã –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        for i, sub in enumerate(subscriptions):
            name = sub.get('name', '')
            used_lessons = sub.get('used_lessons', {})
            if not isinstance(used_lessons, dict):
                used_lessons = {}
            total = sub.get('total_lessons', 0)
            used_count = len(used_lessons)
            
            text += f"‚Ä¢ {name}: {used_count}/{total} –¥–Ω–µ–π\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"{name} ({used_count}/{total} –¥–Ω–µ–π)",
                    callback_data=f"lesson_{category}_{i}_0"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{category}")])
        
        query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        query.answer()

    def handle_lesson_callback(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        chat_id = query.message.chat_id
        _, category, sub_index, lesson_num = query.data.split('_')
        sub_index = int(sub_index)
        lesson_num = int(lesson_num)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        subscriptions = self.subscription_manager.get_subscriptions(chat_id, category)
        if not subscriptions or sub_index >= len(subscriptions):
            query.answer("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        subscription = subscriptions[sub_index]
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ (lesson_num == 0), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        if lesson_num == 0:
            keyboard = []
            total = subscription.get('total_lessons', 0)
            used_lessons = subscription.get('used_lessons', {})
            if not isinstance(used_lessons, dict):
                used_lessons = {}
                subscription['used_lessons'] = used_lessons
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            current_row = []
            for i in range(1, total + 1):
                lesson_str = str(i)
                button_text = used_lessons.get(lesson_str, str(i))
                current_row.append(InlineKeyboardButton(
                    button_text,
                    callback_data=f"lesson_{category}_{sub_index}_{i}"
                ))
                
                if len(current_row) == 4:
                    keyboard.append(current_row)
                    current_row = []
            
            if current_row:
                keyboard.append(current_row)
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"subscription_list_{category}")])
            
            text = f"üé´ –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {subscription.get('name', '')}\n\n"
            text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {len(used_lessons)}/{total}\n\n"
            text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ:"
            
            query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º used_lessons –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'used_lessons' not in subscription:
                subscription['used_lessons'] = {}
            
            lesson_str = str(lesson_num)
            current_date = datetime.now().strftime("%d.%m")
            
            # –ï—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω - —Å–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É
            if lesson_str in subscription['used_lessons']:
                del subscription['used_lessons'][lesson_str]
            else:
                # –ò–Ω–∞—á–µ –æ—Ç–º–µ—á–∞–µ–º –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
                subscription['used_lessons'][lesson_str] = current_date
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subscriptions[sub_index] = subscription
            self.subscription_manager.save_subscriptions(chat_id, category, subscriptions)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            keyboard = []
            total = subscription.get('total_lessons', 0)
            used_lessons = subscription.get('used_lessons', {})
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            current_row = []
            for i in range(1, total + 1):
                lesson_str = str(i)
                button_text = used_lessons.get(lesson_str, str(i))
                current_row.append(InlineKeyboardButton(
                    button_text,
                    callback_data=f"lesson_{category}_{sub_index}_{i}"
                ))
                
                if len(current_row) == 4:
                    keyboard.append(current_row)
                    current_row = []
            
            if current_row:
                keyboard.append(current_row)
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"subscription_list_{category}")])
            
            text = f"üé´ –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {subscription.get('name', '')}\n\n"
            text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {len(used_lessons)}/{total}\n\n"
            text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ:"
            
            query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        query.answer()

    def send_error_message(self, update: Update, text: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        if not text:
            text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞."
        
        if update.callback_query:
            update.callback_query.answer()
            update.callback_query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')
                ]])
            )
        else:
            update.message.reply_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')
                ]])
            ) 